#!/usr/bin/env php
<?php
declare(strict_types=1);

use App\FlavorEnum;
use App\LuaFileParser;
use App\Registry;
use App\TocFileParser;
use App\XmlFileParser;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;

require_once __DIR__ . '/../vendor/autoload.php';

(new SingleCommandApplication())
    ->setName('WoW FrameXML Annotator')
    ->addArgument(
        'flavor',
        InputArgument::REQUIRED,
        'Flavor to filter toc files on. E.g. "mainline", "cata", "vanilla"',
        suggestedValues: fn () => array_map(
            fn (FlavorEnum $flavor) => $flavor->value,
            FlavorEnum::cases(),
        ),
    )
    ->addOption('outputDir', 'o', InputOption::VALUE_REQUIRED, 'Output directory', './.annotated')
    ->addOption('inputDir', 'i', InputOption::VALUE_REQUIRED, 'Directory containing the files to annotate', '.')
    ->addOption('linkPrefix', 'l', InputOption::VALUE_REQUIRED, 'Prefix for links in the output')
    ->addOption('mixAnnotationsIntoSource', 'm', InputOption::VALUE_NONE, 'Include all Lua source files, and add class annotations to the source files')
    ->addOption('includeRawXmlSource', 'x', InputOption::VALUE_NONE, 'Include the raw XML and TOC source files in the output')
    ->setCode(function (InputInterface $input, ConsoleOutput $output) {
        $io = new SymfonyStyle($input, $output);

        $outputDir = $input->getOption('outputDir');
        $inputDir = $input->getOption('inputDir');
        $linkPrefix = $input->getOption('linkPrefix');
        $mixAnnotationsIntoSource = $input->getOption('mixAnnotationsIntoSource');
        $includeRawXmlSource = $input->getOption('includeRawXmlSource');
        try {
            $flavor = FlavorEnum::from($input->getArgument('flavor'));
        } catch (Throwable) {
            $io->error(
                'Invalid flavor. Must be one of: ' . implode(
                    ', ',
                    array_map(fn (FlavorEnum $flavor) => $flavor->value, FlavorEnum::cases()),
                ),
            );
            return Command::INVALID;
        }

        $fileMap = [];
        $fileList = [];
        if (is_file($inputDir) && (str_ends_with($inputDir, '.lua') || str_ends_with($inputDir, '.xml'))) {
            $fileList[] = $inputDir;
            $fileMap[strtolower($inputDir)] = $inputDir;
        } elseif (is_dir($inputDir)) {
            $inputDir = rtrim($inputDir, '/');
            $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($inputDir));
            $iterator->rewind();

            $dirsWithToc = [];
            /** @var $iterator RecursiveDirectoryIterator */
            while ($iterator->valid()) {
                if ('toc' === $iterator->getExtension()) {
                    $dirsWithToc[$iterator->getPath()] = true;
                }
                $filePath = $iterator->getPath() . '/' . $iterator->getFilename();
                $fileMap[strtolower($filePath)] = $filePath;
                $iterator->next();
            }

            $tocParser = new TocFileParser($flavor, $fileMap);
            foreach (array_keys($dirsWithToc) as $dirWithToc) {
                $tocFile = $tocParser->findTocFile($dirWithToc);
                if ($tocFile) {
                    $fileList = array_merge($fileList, $tocParser->listFiles($tocFile), [$tocFile]);
                }
            }
        }
        $fileList = array_unique($fileList);

        $intrinsicRegistry = new Registry();
        $templateRegistry = new Registry();
        $frameRegistry = new Registry();
        $xmlFileParser = new XmlFileParser($intrinsicRegistry, $templateRegistry, $frameRegistry);
        $luaFileParser = new LuaFileParser($mixAnnotationsIntoSource);

        $io->writeln('Parsing files...');
        $progressBar = $io->createProgressBar(count($fileList));
        foreach ($fileList as $filePath) {
            if (str_ends_with($filePath, 'xml')) {
                $xmlFileParser->parse($filePath);
            } elseif (str_ends_with($filePath, 'lua')) {
                $luaFileParser->parse($filePath, $inputDir, $linkPrefix);
            }
            $progressBar->advance();
        }
        $progressBar->finish();
        $io->newLine();
        $io->writeln('Writing annotations...');
        $progressBar = $io->createProgressBar(count($fileList));
        foreach($fileList as $filePath) {
            if (str_ends_with($filePath, 'xml')) {
                $xmlFileParser->writeAnnotationsToFile($filePath, $outputDir, $inputDir, $linkPrefix, $mixAnnotationsIntoSource);
                if ($includeRawXmlSource) {
                    $xmlFileParser->writeRawXmlToFile($filePath, $outputDir, $inputDir);
                }
            } elseif (str_ends_with($filePath, 'lua')) {
                $luaFileParser->writeAnnotationsToFile($filePath, $outputDir, $inputDir);
            } elseif (isset($tocParser) && $includeRawXmlSource && str_ends_with($filePath, 'toc')) {
                $tocParser->writeRawTocToFile($filePath, $outputDir, $inputDir);
            }
            $progressBar->advance();
        }
        $xmlFileParser->writeTemplatesFile('_templates.lua', $outputDir);
        $progressBar->finish();

        $io->success('Done!');

        return Command::SUCCESS;
    })
    ->run();